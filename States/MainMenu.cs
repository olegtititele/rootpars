using PostgreSQL;
using Bot_Keyboards;
using ConfigFile;
using Modules;
using Parser;

using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;


namespace States
{
    public static class MainMenu
    {
        public static async void CallBack(ITelegramBotClient botClient, CallbackQuery callbackQuery, long chatId, int messageId, string firstName, string mainMenuPhoto)
        {
            string state;

            try
            {
                foreach(string country in Config.Countries)
                {
                    
                    if(callbackQuery.Data == country)
                    {
                        if(DB.GetParser(chatId) == "Start")
                        {
                            await botClient.AnswerCallbackQueryAsync(
                                callbackQueryId: callbackQuery.Id,
                                text: "–£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥.",
                                showAlert: true
                            );
                            return;
                        }
                        DB.UpdatePlatform(chatId, callbackQuery.Data);

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>üåê –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞:</b>",
                            replyMarkup: Keyboards.ChooseTypePars(),
                            parseMode: ParseMode.Html
                        );
                    }
                }
                
                switch(callbackQuery.Data)
                {
                    case "parse_all_categories":
                    // –ü–ê–†–°–ò–¢–¨ –í–°–ï –ö–ê–¢–ï–ì–û–†–ò–ò
                        DB.UpdateParserCategory(chatId, "all-categories");
                        string platform = DB.GetPlatform(chatId);
                        string link = DB.GetLink(chatId);
                        string sellerTotalAds = DB.GetSellerTotalAds(chatId);
                        string sellerRegDate = DB.GetSellerRegDate(chatId);
                        decimal sellerRating = DB.GetSellerRating(chatId);
                        string sellerType = DB.GetSellerType(chatId);
                        string blackList = DB.GetBlackList(chatId);

                        DateTime dt;

                        if(DateTime.TryParse(sellerRegDate, out dt))
                        {
                            sellerRegDate = dt.ToString("dd.MM.yyyy");
                        }

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: $"<b><u>–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: </u></b>\n\n<b>üõç –ü–ª–æ—â–∞–¥–∫–∞ ‚áí </b>{platform}\n\n<b>üì® –°—Å—ã–ª–∫–∞ ‚áí </b>–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n<b>üóÑ –ö–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π ‚áí </b>{sellerTotalAds}\n\n<b>üìÜ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞ ‚áí </b>{sellerRegDate}\n\n<b>‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ ‚áí </b>{sellerRating}\n\n<b>üë§ –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ‚áí </b>{sellerType}\n\n<b>üìÇ –ß–° ‚áí </b>{blackList}",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.StartPars
                        );
                        return;
                    case "parse_category":
                    // –ü–ê–†–°–ò–¢–¨ –ö–ê–¢–ï–ì–û–†–ò–Æ
                        DB.UpdateParserCategory(chatId, "category");
                        DB.UpdateState(chatId, "CountryLink");

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: CountryLink.GetCountryLink(DB.GetPlatform(chatId)),
                            replyMarkup: Keyboards.BackToCountries,
                            parseMode: ParseMode.Html
                        );
                        return;
                    case "start_pars":
                        DB.UpdateParser(chatId, "Start");
                        Platforms.GetParser(botClient, chatId, DB.GetPlatform(chatId));

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: $"<b>–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è. –ü–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–Ω–µ–º–∏.</b>\n\n<b>‚ùï –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ </b><code>–°—Ç–æ–ø</code>",
                            parseMode: ParseMode.Html
                        );
                        return;
                    case "show_services":
                    // –ü–û–°–ú–û–¢–†–ï–¢–¨ –°–ï–†–í–ò–°–´
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>üåç –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.</b>",
                            parseMode: ParseMode.Html,
                            replyMarkup: CountriesKeyboards.CountriesSitesKb
                        );
                        return;
                    case "settings":
                    // –ù–ê–°–¢–†–û–ô–ö–ò
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: GenerateMessageText.SettingsText(chatId),
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.SettingsKb(chatId)
                        );
                        return;
                    case "configuration":
                    // –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: GenerateMessageText.ConfigurationText(chatId),
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.ConfigurationKb(chatId)
                        );
                        return;
                    case "account_type":
                    // –í–´–ë–û–† –¢–ò–ü–ê –ê–ö–ö–ê–£–ù–¢–ê
                        if(DB.GetSellerType(chatId) == "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ")
                        {
                            DB.UpdateSellerType(chatId);
                            await botClient.EditMessageReplyMarkupAsync(
                                chatId: chatId,
                                messageId: messageId,
                                replyMarkup: Keyboards.ConfigurationKb(chatId)
                            );
                        }
                        else
                        {
                            DB.UpdateSellerType(chatId);
                            await botClient.EditMessageReplyMarkupAsync(
                                chatId: chatId,
                                messageId: messageId,
                                replyMarkup: Keyboards.ConfigurationKb(chatId)
                            );
                        }
                        return;
                    case "seller_announ_count":
                    // –ö–û–õ-–í–û –û–ë–™–Ø–í–õ–ï–ù–ò–ô –ü–†–û–î–ê–í–¶–ê
                        state = "SellerAdvCount";
                        DB.UpdateState(chatId, state);
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>üìô –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞.\n\n‚úîÔ∏è –ü—Ä–∏–º–µ—Ä: </b><u>10</u> (–ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —É –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10)",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.sellerTotalAdsKb
                        );
                        return;
                    case "seller_rating":
                    // –†–ï–ô–¢–ò–ù–ì –ü–†–û–î–ê–í–¶–ê
                        state = "SellerRating";
                        DB.UpdateState(chatId, state);
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>üìù –í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞(O—Ç 0 –¥–æ 5).\n\n‚úîÔ∏è –ü—Ä–∏–º–µ—Ä: </b><u>2,5</u> (–ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —É –∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 2.5)",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.sellerRatingKb
                        );
                        return;
                    case "seller_reg":
                    // –î–ê–¢–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ü–†–û–î–ê–í–¶–ê
                        state = "SellerRegData";
                        DB.UpdateState(chatId, state);
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>üìó –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞.\n\n‚úîÔ∏è –ü—Ä–∏–º–µ—Ä: </b><u>01.01.2022</u> (–ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å —Å 01.01.2022 –ø–æ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É)",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.RegDateKb()
                        );
                        return;
                    case "whatsapp_text":
                    // –¢–ï–ö–°–¢ –î–õ–Ø WHATSAPP
                        string text = "<b>üñä –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è WhatsApp (<u>–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤</u>):</b>\n\n<b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:</b>\n<code>@adlink</code>-<i>–ü–æ–¥—Å—Ç–∞–≤–∏—Ç —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É</i>\n<code>@adname</code>-<i>–ü–æ–¥—Å—Ç–∞–≤–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</i>\n<code>@adprice</code>-<i>–ü–æ–¥—Å—Ç–∞–≤–∏—Ç —Ü–µ–Ω—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è</i>\n<code>@adlocation</code>-<i>–ü–æ–¥—Å—Ç–∞–≤–∏—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</i>\n<code>@sellername</code>-<i>–ü–æ–¥—Å—Ç–∞–≤–∏—Ç –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞</i>\n\n‚úîÔ∏è <b>–í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç –∏ –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –Ω—É–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.</b>";
                        state = "WhatsappText";
                        DB.UpdateState(chatId, state);
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: text,
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.BackToSettings
                        );
                        return;
                    case "timeout":
                    // –¢–ê–ô–ú-–ê–£–¢
                        text = "<b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–∞–π–º–∞—É—Ç –æ—Ç 10 –¥–æ 30 —Å–µ–∫—É–Ω–¥:</b>";
                        state = "Timeout";
                        DB.UpdateState(chatId, state);
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: text,
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.BackToSettings
                        );
                        return;
                    case "black_list":
                    // –ß–ï–†–ù–´–ô –°–ü–ò–°–û–ö
                        DB.UpdateBlackList(chatId);
                        await botClient.EditMessageReplyMarkupAsync(
                            chatId: chatId,
                            messageId: messageId,
                            replyMarkup: Keyboards.SettingsKb(chatId)
                        );
                        return;
                    case "links_blacklist":
                    // –ß–ï–†–ù–´–ô –°–ü–ò–°–û–ö –°–°–´–õ–û–ö
                        text = "<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.</b>";
                        state = "LinksBlacklist";
                        DB.UpdateState(chatId, state);
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: text,
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.blacklistLinksKb
                        );
                        return;
                    case "back_from_pars":
                        using (var fileStream = new FileStream(Config.menuPhoto, FileMode.Open, FileAccess.Read, FileShare.Read))
                        {
                            await botClient.EditMessageMediaAsync(
                                chatId: chatId,
                                messageId: messageId,
                                media: new InputMediaPhoto(new InputMedia(fileStream, Config.menuPhoto))
                            );
                        }
                
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: GenerateMessageText.MenuText(chatId),
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.MainMenuButtons
                        );
                        return;
                }
            }
            catch(Exception e)
            {
                Console.WriteLine(e);
                await botClient.AnswerCallbackQueryAsync(
                    callbackQueryId: callbackQuery.Id,
                    text: Config.errorMessage,
                    showAlert:false
                );
            }
        }

        // –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        private static string leave_only_numbers(string block)
        {
            string new_block = "";
            for (int i = 0; i < block.Length; i++)
            {
                if (Char.IsDigit(block[i]))
                {
                    new_block += block[i];
                }
                else
                {
                    continue;
                }
            }
            return new_block;
        }
    }
}