using Telegram.Bot.Types.ReplyMarkups;
using PostgreSQL;
using ConfigFile;

namespace Bot_Keyboards
{
    public static class Keyboards
    {

        // MENU
        public static InlineKeyboardMarkup MainMenuButtons = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üîå –ü–∞—Ä—Å–∏–Ω–≥", callbackData: "show_services"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callbackData: "settings"),
                InlineKeyboardButton.WithCallbackData(text: "üõ† –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", callbackData: "configuration"),
            },
        });

        
        public static ReplyKeyboardMarkup MenuKb()
        {
            ReplyKeyboardMarkup Keyboard;
            Keyboard = new(new []
            {
                new KeyboardButton[] {"–ú–µ–Ω—é"},
            })
            {
                ResizeKeyboard = true,
            };
            return Keyboard;
        }

        // SETTINGS
        public static InlineKeyboardMarkup SettingsKb(long chatId)
        {
            string blackList = DB.GetBlackList(chatId);
            InlineKeyboardMarkup blackListKb;


            if(blackList == "–í–∫–ª—é—á–∏—Ç—å")
            {
                blackListKb = new(new []
                {
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "üü¢ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callbackData: "black_list"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫", callbackData: "links_blacklist"),  
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–¢–µ–∫—Å—Ç –¥–ª—è WhatsApp", callbackData: "whatsapp_text"),  
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–¢–∞–π–º-–∞—É—Ç", callbackData: "timeout"),  
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "üèö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callbackData: "back_to_menu"),
                    },
                });
            }
            else
            {
                blackListKb = new(new []
                {
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "‚ö™Ô∏è –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callbackData: "black_list"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫", callbackData: "links_blacklist"),  
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–¢–µ–∫—Å—Ç –¥–ª—è WhatsApp", callbackData: "whatsapp_text"),  
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–¢–∞–π–º-–∞—É—Ç", callbackData: "timeout"),  
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "üèö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callbackData: "back_to_menu"),
                    },
                });
            }

            return blackListKb;
        }

        public static InlineKeyboardMarkup ConfigurationKb(long chatId)
        {
            string sellerType = DB.GetSellerType(chatId);
            InlineKeyboardMarkup configurationKb;
            if(sellerType == "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ")
            {
                configurationKb = new(new []
                {
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–ü–∞—Ä—Å–∏—Ç—å: —Ç–æ–ª—å–∫–æ \"–ß–∞—Å—Ç–Ω—ã–µ –ª–∏—Ü–∞\"", callbackData: "account_type"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–ö–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞", callbackData: "seller_announ_count"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞", callbackData: "seller_rating"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞", callbackData: "seller_reg"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "üèö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callbackData: "back_to_menu"),
                    },
                });
            }
            else
            {
                configurationKb = new(new []
                {
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–ü–∞—Ä—Å–∏—Ç—å: \"–í—Å–µ —Ç–∏–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤\"", callbackData: "account_type"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–ö–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞", callbackData: "seller_announ_count"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞", callbackData: "seller_rating"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞", callbackData: "seller_reg"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "üèö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callbackData: "back_to_menu"),
                    },
                });
            }

            return configurationKb;
        }

        public static InlineKeyboardMarkup ChooseTypePars()
        {
            InlineKeyboardMarkup keyboard = new(new []
            {
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: $"–ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callbackData: "parse_all_categories"),
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: $"–í–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É", callbackData: "parse_category"),
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_countries"),
                }
            });
            return keyboard;
        }

        public static InlineKeyboardMarkup RegDateKb()
        {
            DateTime today = DateTime.Today;
            InlineKeyboardMarkup regDateKb;

            regDateKb = new(new []
            {
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: $"–°–µ–≥–æ–¥–Ω—è - {today.ToString("dd.MM.yyyy")}", callbackData: "today_date"),
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: $"–û—Ç–∫–ª—é—á–∏—Ç—å", callbackData: "disable_reg_date"),
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_configuration"),
                }
            });

            return regDateKb;
        }

        public static InlineKeyboardMarkup sellerTotalAdsKb = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: $"–û—Ç–∫–ª—é—á–∏—Ç—å", callbackData: "disable_seller_total_ads"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_configuration"),
            }
        });

        public static InlineKeyboardMarkup sellerRatingKb = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: $"0", callbackData: "0"),
                InlineKeyboardButton.WithCallbackData(text: $"1", callbackData: "1"),
                InlineKeyboardButton.WithCallbackData(text: $"2", callbackData: "2"),
                InlineKeyboardButton.WithCallbackData(text: $"3", callbackData: "3"),
                InlineKeyboardButton.WithCallbackData(text: $"4", callbackData: "4"),
                InlineKeyboardButton.WithCallbackData(text: $"5", callbackData: "5"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_configuration"),
            }
        });

        public static InlineKeyboardMarkup blacklistLinksKb = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏", callbackData: "delete_all_links"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_settings"),
            },
        });


        // PARSER
        public static InlineKeyboardMarkup StartPars = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üè† –í –º–µ–Ω—é", callbackData: "back_from_pars"),
                InlineKeyboardButton.WithCallbackData(text: "ü™ê –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callbackData: "start_pars"),
            }
        });


        public static ReplyKeyboardMarkup StopPars()
        {
            ReplyKeyboardMarkup Keyboard;
            Keyboard = new(new []
            {
                new KeyboardButton[] {"–°—Ç–æ–ø"},
            })
            {
                ResizeKeyboard = true,
            };
            return Keyboard;
        }


        // BACK KEYBOARDS
        public static InlineKeyboardMarkup BackBtnKb = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üèö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callbackData: "back_to_menu"),
            },
        });
        public static InlineKeyboardMarkup BackToProfile = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üèö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callbackData: "back_to_profile"),
            },
        });

        public static InlineKeyboardMarkup BackFromParse = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üèö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callbackData: "back_from_pars"),
            },
        });

        public static InlineKeyboardMarkup BackToSettings= new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_settings"),
            },
        });
        public static InlineKeyboardMarkup BackToConfiguration= new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_configuration"),
            },
        });

        public static InlineKeyboardMarkup BackToCountries = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_countries"),
            },
        });
    }
}